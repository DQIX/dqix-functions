main:
  versions:
    - jpn
    - eur
    - usa
  address:
    jpn: 0x2000000
    eur: 0x2000000
    usa: 0x2000000
  length:
    jpn: 0xF08000
    eur: 0xF08000
    usa: 0xF08000
  description: in field memory
  functions:
    - name: getAddrCurrentFieldId
      address:
        jpn: 0x2012DAC
      description: |-
        Returns the current field id.
        
        return: field Id addr = DAT_020fb11c([DAT_02012db4] = DAT_020fb11c(CurrentField1_Id) = 0x4E21 = angel falls)
    - name: getCurrentFieldStructure
      address:
        jpn: 0x202751C
      description: |-
        Gets the structure of the field where the player is currently located.
        The current field id is stored in 0x020FB11C(CurrentField1_Id), and the function searches for the structure based on this.
        
        return: address 0x020FDAAC + 0x314 * N(0-3 or 4)
    - name: SearchCurrentFieldStructure
      address:
        jpn: 0x2028420
      description: |-
        Finds a field structure that matches the condition of the argument.
        see: getCurrentFieldStructure
        
        r0: 0x020FDAAC
        r1: field id(angel falls = 0x4E21)
        return: address 0x020FDAAC + 0x314 * N(0-3 or 4)
    - name: getSpawningMonsters
      address:
        jpn: 0x2075168
      description: |-
        Lottery for monsters to spawn in the field
        This table is not affected by grotto's special floor
        If this function returns a number that does not exist in the table, no spawning will occur and it will be ignored
        LR: 0x02074E20
        
        r0: BaseAddr, 0x020FDB08
        return: monsterId„ÄÅIgnored if invalid
    - name: ChooseFieldMonsterId
      address:
        jpn: 0x2075168
        eur: 0x2073FEC
        usa: 0x2073FDC
      description: |-
        Choose which monsters to spawn using AT, using the monster table and probabilities deployed at specific locations in memory.
        This function only chooses the type of spawning monsters. the conditions under which the monsters are generated are selected by an unknown function.
        If an ID that cannot be spawned is returned (id not on the table, trap monster, etc.), the spawn will not be performed.
        
        arguments are not yet understood
        r1: jpn(0x20FDB08?), eur(0x20FDDC4)
        return: monsterId,
    - name: GenerateCompanionByBT
      address:
        jpn: 0x209CD4C
        eur: 0x209AFE4
        usa: 0x209AFD4
      description: |-
        Generate the number of monsters, 2nd group, and 3rd group using BT.
        
        r0: jpn(0x20FDBCC), eur(0x20FDE68) table base address
        r1: 1 Group monsterId
        r2: Table ID used to determine the type of companion?
        r3: Table ID used for companion determination and 1G number determination?
        arg5: jpn(0x27E345C), eur(0x27E333C) the resulting structure
        arg6: jpn(0x20FDAAC), eur(0x20FDD44) field information. Used to get the upper limit of monsters.
    - name: GenerateCompanionByAT
      address:
        jpn: 0x209D1C0
        eur: 0x209B458
        usa: 0x209B448
      description: |-
        Use AT to generate complete maritime encounters. Generates from the 1st group to the 3rd group.
        There is a sea area, and the range of the sea area is listed in the Japanese DQ9 strategy book etc.
        The number of groups increases every 33.3333%
        
        Consume AT random number
        Consumes BT random number
        
        r0: jpn(0x20FDBCC) table base address
        r1: table Id 114-117
        r2: the resulting structure
        r3: jpn(0x20FDAAC) This is where the upper limit information is stored, the upper limit is always 5 bodies
    - name: getEncTableStartAddr
      address:
        jpn: 0x209D75C
      description: |-
        Examine the table expanded to a specific location in memory and find the actual table start point based on the id.
        
        r0: table base addr
        r1: table id
        return: table start addr
    - name: DAT_022A7100
      address:
        jpn: 0x218C1D0
      description: |-
        Return 0x022A7100.
        Used in processing encounters.
        It is probably the starting address of the monster structure.
        
        No arguments
        return: 0x022A7100
    - name: PreemptiveLottery
      address:
        jpn: 0x2197C50
      description: |-
        A random number is used to choose whether the enemy is first, the party is first, or a normal encounter.
        The process involves obtaining the highest dexterity value in the party and calculating the following formula
        kiyousa * 0.05 + 2
        And add an additional +10% chance if the player bumps into the monster's back.
        Then, if the monster hits the player from behind, the enemy's first strike rate is determined at 12%, and the normal encounters at 2%.
        
        arguments are not yet understood
        return: 0 for normal encounters, 1 for enemies too stunned to move, and 2 for monsters to attack you out of the blue.
    - name: getMonsterStructure
      address:
        jpn: 0x21A321C
      description: |-
        maybe get the structure of the specified monster
        Get 0x020F33D8 and search based on this
        
        for i=0; i <= 0x2f?; i++ then
          addr = (int) [0x020F33D8 + (i + 0x70) * 4 + 8] = 0x22F0E58
          if addr == 0 then
            continue
          end
          val = (short) [0x22F0E58 + 0x16a] = [0x22f0fc2] = 0x4
          if val == param_2 then
            ret addr
          end
        end
        
        structure monster{
          short   [0x2]   monsterId
          int     [0x8]   unknown int
          int     [0x38]  monster freeze tick(animation stop)
          float2  [0x40]  monster transparency
          float2  [0x44]  monster x
          short   [0x46]  monster chunk x
          float2  [0x4c]  monster z
          short   [0x4E]  monster chunk z
          float2  [0x50]  monster rotation z
          float2  [0x54]  monster rotation diff y1
          float2  [0x56]  monster rotation diff y2
          float2  [0x58]  monster rotation x
          float2  [0xC4]  Animation growing from the ground y
          ?       [0x5C]  monster size x
          ?       [0x5E]  monster size y
          ?       [0x60]  monster size z
          float2? [0xAE]  monster rotation y
          float2? [0x124] monster y+ offset
          short   [0x126] monster chunk y+ offset
          
          short   [0x168] spawned encounter table
          int     [0x16a] encounter id addr
          
        }
        
        r0: maybe the starting address of the monster 0x22A7100(check if it's 0)
        r1: Monster encountered 0-2f?
        return: 0x022A7100
  data:
    - name: CurrentField1_Id
      address:
        jpn: 0x20FB11C
      length:
        jpn: 0x2
    - name: FieldStructure1_id
      address:
        jpn: 0x20FDAAC
      length:
        jpn: 0x2
    - name: UnknownEncounterRelated1
      address:
        jpn: 0x22A4B08
      length:
        jpn: 0x4
